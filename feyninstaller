#!/usr/bin/env python

import logging
import json
from optparse import OptionParser
import os
import shutil
import stat
import subprocess 
import sys
import tempfile
import urllib2
import urlparse

apps_info = None

def get_apps(config):
    global apps_info
    if not apps_info:
        apps_info = json.loads(open(os.path.join(config['repo_path'], 'apps.json')).read())
    return apps_info

def get_app_info(name, version, config):
    apps = get_apps(config)
    info = dict(apps[name].items())
    del info['versions']
    info.update(apps[name]['versions'][version])
    return info 

def do_list_apps(config):
    apps = get_apps(config)
    for a in apps: 
        print a 
        for v in apps[a]['versions']:
            print '%s - %s' % (a, v)

def do_boot(config):
    for app in config['apps']:
        do_install_app(app, config['apps'][app], config)
 

def execute_install(app, config):
    try:
        name = app['app_name']
        version = app['app_version']
        logging.info('Installing %s v%s' % (name, version))

        # just remove whatever there might be

        # download tar
        if 'tar_file' in app:
            url = urlparse.urljoin(app['base_url'], app['tar_file'])
        else:
            url = urlparse.urljoin(app['base_url'], '%s-%s.tar.gz' % (name, version))

        tar = tempfile.NamedTemporaryFile(delete=False)
        req = urllib2.urlopen(url)
        with tar:
            shutil.copyfileobj(req, tar)

        app_dir = os.path.join(config['base_path'], '%s-%s' % (name, version))
        shutil.rmtree(app_dir, ignore_errors=True)

        # execute installer
        installer = app['installer']
        script_name = os.path.join(config['repo_path'], 'installers', installer)
        command = [script_name,
                   name,
                   version,
                   tar.name,
                   app_dir,
                   os.path.join(config['base_path'], 'src')]
        logging.info('Executing: %s' % ' '.join(command))
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        (child_stdout, child_stderr) = p.communicate()
        st = p.returncode
        if st != 0:
            logging.error('Error executing script, script output:\n%s' % child_stdout)
        else:
            logging.debug('Script output:\n%s' % child_stdout)
            return True
    except KeyError, e:
        logging.error('Invalid application data %s' % e)
    except IOError, e:
        logging.error("Error trying to create script %s" % e)
    return False

def do_install_app(app_name, app_version, config):
    logging.debug('Searching for %s v%s...' % (app_name, app_version))
    apps = get_apps(config)
    if app_name not in apps:
        logging.error('%s is not available for installing' % app_name)
        sys.exit(1)
    if app_version not in apps[app_name]['versions']:
        logging.error('%s v%s is not available for installing' % (app_name, app_version))
        sys.exit(1)
    app = get_app_info(app_name, app_version, config)
    if 'installed' in app and app['installed']:
        logging.debug("Application is already installed, ignoring.")
        return
    if 'dependencies' in app:
        for dep in app['dependencies']:
            if dep not in apps:
                logging.warn("Dependency %s not available, ignoring." % dep)
                continue
            try:
                v = config['apps'][dep]
            except KeyError:
                logging.info("Dependency %s not configured, searching for version" % dep)
                k = apps[dep]['versions'].keys()
                k.sort
                v = k[-1]
            logging.info("Installing dependency %s v%s" % (dep, v))
            do_install_app(dep, v, config)
    # this should be smarter XXX
    if execute_install(app, config):
        logging.debug("Set application as installed")
        apps[app_name]['versions'][app_version]['installed'] = True


if __name__ == '__main__':
    # FIXME, use better argument parsing.
    usage = "usage: %prog [options] command [command option]"
    parser = OptionParser(usage)
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
                      help='increase verbosity', default=False)
    parser.add_option('-c', '--config', dest='conffile', 
                      help='use FILE as config file', metavar='FILE')
    (options, args) = parser.parse_args()
    if len(args) < 1:
        parser.error("missing command: boot, list, install")

    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)-15s %(levelname)-8s %(message)s')

    config = {}
    if options.conffile:
        try:
            logging.info("Using %s as config file" % options.conffile)
            config = json.loads(open(options.conffile).read())
        except:
            logging.error("%s" % options.conffile)
            sys.exit(1)


    # nice default values
    config.setdefault('base_path', '/usr/local')
    config['base_path'] = os.path.abspath(config['base_path'])
    config.setdefault('etc_path', os.path.join(config['base_path'], 'etc'))
    config.setdefault('repo', 'http://github.com/enolfc/feynapps.git')
    config.setdefault('server', 'http://193.146.75.142/feynapps')
    config.setdefault('apps', {})

    config['repo_path'] = os.path.abspath(os.path.dirname(sys.argv[0]))

    if (args[0] == 'boot'):
        if len(args) != 1:
            parser.error("boot command does not take any extra options")
        do_boot(config)
    elif (args[0] == 'list'):
        if len(args) != 1:
            parser.error("list command does not take any extra options")
        do_list_apps(config)
    elif (args[0] == 'install'):
        if len(args) != 3:
            parser.error("install command requires app_name and app_version")
        do_install_app(args[1], args[2], config)
    else:
        parser.error("unknown command %s" % args[0])
